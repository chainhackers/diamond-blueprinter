import Head from 'next/head';
import Image from 'next/image';
import { Introduction } from '@/components/Introduction/Introduction';
import { Infographic } from '@/components/Infographic';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.scss';
import { DeployButton, Navigation, PoweredBy } from '@/components';
import { ContractReceipt, ContractTransaction, ethers } from 'ethers';
import { fetchSigner } from '@wagmi/core';
import abi from './../abi.json';
import { useState } from 'react';

import { useRouter } from 'next/router';
import Link from 'next/link';
import { getContract } from '@/chainApi';
import { useConnectModal } from '@rainbow-me/rainbowkit';
const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [deploying, setDeploying] = useState<boolean>(false);
  const [deployingError, setDeployingError] = useState<Error | null>(null);
  const { openConnectModal } = useConnectModal();

  const router = useRouter();
  const deployButtonHandler: React.MouseEventHandler = async () => {
    try {
      setDeploying(true);
      setDeployingError(null);
      const signer = await fetchSigner();
      if (!signer) {
        openConnectModal!();
        return;
      }

      console.log(process.env);

      if (!process.env.NEXT_PUBLIC_KIMBERLITE_CONTRACT_ADDRESS) {
        console.error('on kimberlite address');
        return;
      }
      const contract = await getContract(process.env.NEXT_PUBLIC_KIMBERLITE_CONTRACT_ADDRESS);

      console.log(contract);

      // const contract = new ethers.Contract(
      //   '0x88c875606ae309172F89F231dF5A9Ffb5AD64994',
      //   abi,
      //   signer!,
      // );
      if (!contract) {
        console.error('no contract');
        return;
      }

      contract.on('DiamondExtracted', (diamondAddress) => {
        console.log('DiamondExtracted', diamondAddress);
        if (receipt.status === 1 && !!diamondAddress)
          router.push(`/diamond?contract=${diamondAddress}`);
      });

      const transaction: ContractTransaction = await contract.extractDiamond(
        process.env.NEXT_PUBLIC_KIMBERLITE_META_URL,
      );

      const receipt: ContractReceipt = await transaction.wait();
      console.log(receipt);
    } catch (error) {
      console.log(error);
      if (error instanceof Error) {
        setDeployingError(error);
        return;
      }
      setDeployingError(new Error(String(error)));
    } finally {
      setDeploying(false);
    }
  };

  return (
    <>
      <Head>
        <title>Diamod Bluprinter</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <div className={styles.background}></div>
        <div className={styles.title}>
          <h1 className={styles.h1}>ðŸš€ Get started with parallel development now!</h1>
        </div>
        <p className={styles.p}>
          Make Your Developers Happy - Develop Contracts Like Microservices Empower your developers
          by allowing them to work on smart contracts as if they were microservices. Our visual tool
          simplifies the development process, increasing productivity and satisfaction among your
          team. Give your developers the flexibility they need to create innovative, efficient, and
          modular smart contract systems.
        </p>
        <div className={styles.deployButton}>
          <DeployButton
            onClick={deployButtonHandler}
            deploying={deploying}
            error={!!deployingError}
          />
        </div>
        <div className={styles.poweredBy}>
          <PoweredBy />
        </div>
        <Introduction />
        <Infographic />
      </main>
      <footer className={styles.footer}>
        <div className={styles.subTitle}>
          <span className={styles.diamond}>Diamond Blueprinter</span> by{' '}
          <Link href={'https://twitter.com/ChainHackerClan'} target='_blank'>
            Chainhackers
          </Link>
        </div>
        <div className={styles.menuContainer}>
          <ul className={styles.ul}>
            <li className={styles.li}>Discord</li>
            <li className={styles.li}>GitHub</li>
            <li className={styles.li}>Team</li>
          </ul>
        </div>
      </footer>
    </>
  );
}
